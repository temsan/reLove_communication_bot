[tool.poetry]
name = "relove-communication-bot"
version = "0.1.0"
description = "Telegram bot for Relove community engagement"
authors = ["Your Name <you@example.com>"] # Замените на ваши данные
readme = "README.md" # Предполагаем наличие README.md
packages = [{include = "relove_bot"}]

[tool.poetry.dependencies]
python = "^3.11" # Используем версию из Dockerfile
aiogram = ">=3.0.0"
aiohttp = ">=3.8.0"
pydantic = ">=2.0.0"
pydantic-settings = ">=2.0.0"
python-json-logger = ">=2.0.0"
# Добавьте сюда зависимости для БД (например, asyncpg, sqlalchemy[asyncio]) когда будете готовы
sqlalchemy = {extras = ["asyncio"], version = "^2.0.0"}
asyncpg = "^0.29.0"
# Добавьте сюда зависимости для планировщика (например, apscheduler)

[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
pytest-asyncio = "^0.21.0"
# Добавьте другие dev-зависимости (например, black, ruff, mypy)

[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]
addopts = "--cov=relove_bot --cov-report=term-missing --cov-report=html"

[tool.coverage.run]
source = ["relove_bot"]
omit = ["tests/*", "setup.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "pass",
    "raise ImportError",
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]

[tool.ruff]
line-length = 100
target-version = "py39"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "S",  # flake8-bandit
    "N",  # pep8-naming
    "UP", # pyupgrade
    "ANN", # flake8-annotations
    "S",  # flake8-bandit
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "COM", # flake8-commas
    "DTZ", # flake8-datetimez
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "RUF", # ruff-specific rules
]
ignore = [
    "ANN101", # missing-self-type
    "ANN102", # missing-type-cls
    "ANN401", # dynamically-typed-expression
    "S101",   # assert
    "S603",   # subprocess-call
    "S607",   # start-process-with-partial-path
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "ANN", "PLR2004"]
"__init__.py" = ["F401"] 