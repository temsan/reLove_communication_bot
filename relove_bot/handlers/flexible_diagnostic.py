"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–∏–±–∫–æ–π LLM-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–∏–∞–ª–æ–≥.

–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –æ—Ç–≤–µ—Ç—ã,
–∏—Å–ø–æ–ª—å–∑—É—è –ø—É—Ç—å –≥–µ—Ä–æ—è –ö—ç–º–ø–±–µ–ª–ª–∞ –∫–∞–∫ –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏–π –∫–∞—Ä–∫–∞—Å.
"""
import logging
from typing import Dict, Optional
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from relove_bot.services.llm_service import llm_service
from relove_bot.services.prompts import FLEXIBLE_DIAGNOSTIC_PROMPT
from relove_bot.db.models import User, DiagnosticResult, JourneyStageEnum
from relove_bot.db.repository import UserRepository

logger = logging.getLogger(__name__)
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≥–∏–±–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
class FlexibleDiagnosticStates(StatesGroup):
    in_diagnostic = State()
    completed = State()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π
active_diagnostic_sessions: Dict[int, Dict] = {}


def get_or_create_diagnostic_session(user_id: int) -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç —Å–µ—Å—Å–∏—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    if user_id not in active_diagnostic_sessions:
        active_diagnostic_sessions[user_id] = {
            "conversation_history": [],
            "user_profile": None,
            "journey_stage": None,
            "message_count": 0
        }
    return active_diagnostic_sessions[user_id]


@router.message(Command("diagnostic"))
async def start_flexible_diagnostic(message: Message, state: FSMContext, session: AsyncSession):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –≥–∏–±–∫—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–∏–∞–ª–æ–≥.
    
    –ö–æ–º–∞–Ω–¥–∞: /diagnostic
    """
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_repo = UserRepository(session)
    user = await user_repo.get_user(user_id)
    
    # –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤ –ë–î
    session_service = SessionService(session)
    db_session = await session_service.get_or_create_session(
        user_id=user_id,
        session_type="diagnostic",
        state="in_diagnostic"
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è LLM
    profile_context = ""
    if user:
        if user.psychological_summary:
            profile_context += f"–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å:\n{user.psychological_summary}\n\n"
        if user.streams:
            profile_context += f"–ü–æ—Ç–æ–∫–∏ reLove: {', '.join(user.streams)}\n\n"
        if user.profile_summary:
            profile_context += f"–ü—Ä–æ—Ñ–∏–ª—å: {user.profile_summary}\n\n"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ session_data
    await session_service.update_session_data(
        db_session.id,
        session_data={"user_profile": profile_context}
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç LLM
    system_prompt = FLEXIBLE_DIAGNOSTIC_PROMPT
    if profile_context:
        system_prompt += f"\n\n–ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–§–ò–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:\n{profile_context}"
    
    try:
        first_message = await llm_service.analyze_text(
            "–ù–∞—á–Ω–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É. –ü–æ–∑–¥–æ—Ä–æ–≤–∞–π—Å—è –∏ –∑–∞–¥–∞–π –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å.",
            system_prompt=system_prompt,
            max_tokens=200
        )
        
        await session_service.add_message(
            db_session.id,
            "assistant",
            first_message or "–ü—Ä–∏–≤–µ—Ç. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –ø—Ä–∏–≤–µ–ª–æ —Ç–µ–±—è —Å—é–¥–∞? –ß—Ç–æ —Å–µ–π—á–∞—Å –≤–∞–∂–Ω–æ?"
        )
        
        await message.answer(
            first_message or "–ü—Ä–∏–≤–µ—Ç. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –ø—Ä–∏–≤–µ–ª–æ —Ç–µ–±—è —Å—é–¥–∞? –ß—Ç–æ —Å–µ–π—á–∞—Å –≤–∞–∂–Ω–æ?"
        )
        
        await state.set_state(FlexibleDiagnosticStates.in_diagnostic)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        )


@router.message(FlexibleDiagnosticStates.in_diagnostic)
async def process_diagnostic_message(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.
    """
    user_id = message.from_user.id
    user_message = message.text
    
    if not user_message:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –∏–∑ –ë–î
    session_service = SessionService(session)
    db_session = await session_service.get_active_session(user_id, "diagnostic")
    
    if not db_session:
        await message.answer("–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏ –Ω–æ–≤—É—é: /diagnostic")
        await state.clear()
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await session_service.add_message(db_session.id, "user", user_message)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏–∑ –ë–î
    conversation_history = db_session.conversation_history or []
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
    conversation_context = "\n".join([
        f"{'–î–∏–∞–≥–Ω–æ—Å—Ç' if msg['role'] == 'assistant' else '–ß–µ–ª–æ–≤–µ–∫'}: {msg['content']}"
        for msg in conversation_history[-10:]
    ])
    
    # –ü–æ–ª—É—á–∞–µ–º user_profile –∏–∑ session_data
    user_profile = ""
    if db_session.session_data and "user_profile" in db_session.session_data:
        user_profile = db_session.session_data["user_profile"]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
    system_prompt = FLEXIBLE_DIAGNOSTIC_PROMPT
    if user_profile:
        system_prompt += f"\n\n–ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–§–ò–õ–Ø:\n{user_profile}"
    
    prompt = f"""–ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê:
{conversation_context}

–ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –ß–ï–õ–û–í–ï–ö–ê:
{user_message}

–¢–í–û–Ø –ó–ê–î–ê–ß–ê:
–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞. –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –¥–∞–π –∏–Ω—Å–∞–π—Ç, –µ—Å–ª–∏ –≤–∏–¥–∏—à—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å.
–ü–æ—Å–ª–µ 3-5 –æ–±–º–µ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç—Ç–∞–ø –ø—É—Ç–∏ –≥–µ—Ä–æ—è.

–ï—Å–ª–∏ –≤–∏–¥–∏—à—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç—Ç–∞–ø ‚Äî –¥–∞–π –∏–Ω—Å–∞–π—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
"–ü–æ—Ö–æ–∂–µ, —Ç—ã —Å–µ–π—á–∞—Å –≤ [—ç—Ç–∞–ø –ø—É—Ç–∏]. –≠—Ç–æ –∑–Ω–∞—á–∏—Ç [–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ]."
"""
    
    try:
        response = await llm_service.analyze_text(
            prompt,
            system_prompt=system_prompt,
            max_tokens=300
        )
        
        if not response:
            await message.answer("–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑, —è –Ω–µ –ø–æ–Ω—è–ª.")
            return
        
        await session_service.add_message(db_session.id, "assistant", response)
        
        await message.answer(response)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        updated_session = await session_service.repository.get_session_by_id(db_session.id)
        message_count = len(updated_session.conversation_history) if updated_session.conversation_history else 0
        
        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±–º–µ–Ω–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        if message_count >= 6:
            await message.answer(
                "\n\nüí° –•–æ—á–µ—à—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—é–º–µ? –ù–∞–ø–∏—à–∏ /end_diagnostic"
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")


@router.message(Command("end_diagnostic"))
async def end_diagnostic(message: Message, state: FSMContext, session: AsyncSession):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
    
    –ö–æ–º–∞–Ω–¥–∞: /end_diagnostic
    """
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –∏–∑ –ë–î
    session_service = SessionService(session)
    db_session = await session_service.get_active_session(user_id, "diagnostic")
    
    if not db_session:
        await message.answer("–ê–∫—Ç–∏–≤–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –Ω–µ—Ç. –ù–∞—á–Ω–∏ —Å /diagnostic")
        await state.clear()
        return
    
    conversation_history = db_session.conversation_history or []
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    conversation_text = "\n".join([
        f"{'–î–∏–∞–≥–Ω–æ—Å—Ç' if msg['role'] == 'assistant' else '–ß–µ–ª–æ–≤–µ–∫'}: {msg['content']}"
        for msg in conversation_history
    ])
    
    analysis_prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∞–ª–æ–≥ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏:

1. –≠–¢–ê–ü –ü–£–¢–ò –ì–ï–†–û–Ø (—Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞):
- –û–±—ã—á–Ω—ã–π –º–∏—Ä
- –ó–æ–≤ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—é
- –û—Ç–∫–∞–∑ –æ—Ç –ø—Ä–∏–∑—ã–≤–∞
- –í—Å—Ç—Ä–µ—á–∞ —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º
- –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞
- –ò—Å–ø—ã—Ç–∞–Ω–∏—è, —Å–æ—é–∑–Ω–∏–∫–∏, –≤—Ä–∞–≥–∏
- –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ —Å–æ–∫—Ä–æ–≤–µ–Ω–Ω–æ–π –ø–µ—â–µ—Ä–µ
- –ò—Å–ø—ã—Ç–∞–Ω–∏–µ
- –ù–∞–≥—Ä–∞–¥–∞
- –î–æ—Ä–æ–≥–∞ –Ω–∞–∑–∞–¥
- –í–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ
- –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Å —ç–ª–∏–∫—Å–∏—Ä–æ–º

2. –ö–†–ê–¢–ö–û–ï –û–ü–ò–°–ê–ù–ò–ï —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è

3. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò (2-3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —à–∞–≥–∞)

–î–ò–ê–õ–û–ì:
{conversation_text}

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–≠–¢–ê–ü: [–Ω–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞]
–°–û–°–¢–û–Ø–ù–ò–ï: [–æ–ø–∏—Å–∞–Ω–∏–µ]
–®–ê–ì–ò: [1. —à–∞–≥] [2. —à–∞–≥] [3. —à–∞–≥]
"""
    
    try:
        analysis = await llm_service.analyze_text(
            analysis_prompt,
            max_tokens=400
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
        user_repo = UserRepository(session)
        user = await user_repo.get_user(user_id)
        
        if user:
            # –ü–∞—Ä—Å–∏–º —ç—Ç–∞–ø –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
            journey_stage = None
            for stage in JourneyStageEnum:
                if stage.value in analysis:
                    journey_stage = stage
                    break
            
            # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            diagnostic_result = DiagnosticResult(
                user_id=user_id,
                journey_stage=journey_stage or JourneyStageEnum.ORDINARY_WORLD,
                description=analysis,
                answers={"conversation": conversation_history}
            )
            session.add(diagnostic_result)
            await session.commit()
        
        await message.answer(
            f"üìä **–†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò**\n\n{analysis}\n\n"
            "–•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –ø—Ä–æ–≤–æ–∫–∞—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é —Å –ù–∞—Ç–∞—à–µ–π? /natasha\n"
            "–ò–ª–∏ —É–∑–Ω–∞—Ç—å –æ –ø–æ—Ç–æ–∫–∞—Ö? /streams",
            parse_mode="Markdown"
        )
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –≤ –ë–î
        await session_service.complete_session(db_session.id)
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. "
            "–ù–æ —Ç–≤–æ–π –¥–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ."
        )

