from typing import Dict, Optional
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from ..core.knowledge_base import (
    DIAGNOSTIC_QUESTIONS,
    PSYCHOTYPES,
    JOURNEY_STAGES,
    analyze_answers,
    get_recommendation,
    Psychotype,
    HeroJourneyStage
)
from ..db.models import DiagnosticResult, PsychotypeEnum, JourneyStageEnum
from ..db.repository import get_repository
from ..keyboards.diagnostic import get_diagnostic_keyboard
from ..states.diagnostic_states import DiagnosticStates

router = Router()

@router.message(Command("start_diagnostic"))
async def start_diagnostic(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await state.set_state(DiagnosticStates.STARTING_DIAGNOSTICS)
    await state.update_data(current_question=0, answers={})
    
    question = DIAGNOSTIC_QUESTIONS[0]
    await message.answer(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É reLove! üåü\n\n"
        f"–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø —Ä–∞–∑–≤–∏—Ç–∏—è –∏ –Ω–∞–π—Ç–∏ —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n"
        f"–í–æ–ø—Ä–æ—Å {question['id']} –∏–∑ {len(DIAGNOSTIC_QUESTIONS)}:\n"
        f"{question['text']}\n\n"
        f"–í–∞—à –æ—Ç–≤–µ—Ç –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –≤—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç–µ —Å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é "
        f"–∏ –∫–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞ –æ—Ç–∫—Ä—ã—Ç—ã –ø–µ—Ä–µ–¥ –≤–∞–º–∏.",
        reply_markup=get_diagnostic_keyboard(question["options"])
    )
    await state.set_state(DiagnosticStates.ANSWERING)

@router.callback_query(DiagnosticStates.ANSWERING, F.data.startswith("answer_"))
async def process_answer(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    data = await state.get_data()
    current_question = data["current_question"]
    answers = data["answers"]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    answer = callback.data.split("_")[1]
    answers[str(DIAGNOSTIC_QUESTIONS[current_question]["id"])] = answer
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    current_question += 1
    
    if current_question < len(DIAGNOSTIC_QUESTIONS):
        await state.update_data(current_question=current_question, answers=answers)
        question = DIAGNOSTIC_QUESTIONS[current_question]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ –≤–æ–ø—Ä–æ—Å—É
        context = ""
        if question.get("emotional_context"):
            context += f"\n{question['emotional_context']}\n"
        if question.get("logical_context"):
            context += f"\n{question['logical_context']}\n"
        
        await callback.message.edit_text(
            f"–í–æ–ø—Ä–æ—Å {question['id']} –∏–∑ {len(DIAGNOSTIC_QUESTIONS)}:\n"
            f"{question['text']}\n\n"
            f"{context}",
            reply_markup=get_diagnostic_keyboard(question["options"])
        )
    else:
        # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
        await state.set_state(DiagnosticStates.COMPLETED)
        await state.update_data(answers=answers)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        psychotype, journey_stage = analyze_answers(answers)
        recommendation = get_recommendation(psychotype, journey_stage)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏—è
        psychotype_desc = PSYCHOTYPES[psychotype]
        journey_desc = JOURNEY_STAGES[journey_stage]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = (
            f"üåü *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:*\n\n"
            f"üéØ *–ü—Å–∏—Ö–æ—Ç–∏–ø:* {psychotype_desc.name}\n"
            f"{psychotype_desc.description}\n\n"
            f"üí´ *–í–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:*\n"
            f"{chr(10).join('‚Ä¢ ' + s for s in psychotype_desc.strengths)}\n\n"
            f"üå± *–û–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞:*\n"
            f"{chr(10).join('‚Ä¢ ' + c for c in psychotype_desc.challenges)}\n\n"
            f"üé≠ *–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã:*\n"
            f"{chr(10).join('‚Ä¢ ' + t for t in psychotype_desc.emotional_triggers)}\n\n"
            f"üß† *–õ–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏:*\n"
            f"{chr(10).join('‚Ä¢ ' + p for p in psychotype_desc.logical_patterns)}\n\n"
            f"üåÖ *–≠—Ç–∞–ø –ø—É—Ç–∏:* {journey_desc.name}\n"
            f"{journey_desc.description}\n\n"
            f"üí´ *–¢–µ–∫—É—â–µ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:*\n"
            f"{journey_desc.emotional_state}\n\n"
            f"üéØ *–¢–æ—á–∫–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã:*\n"
            f"{chr(10).join('‚Ä¢ ' + r for r in journey_desc.resistance_points)}\n\n"
            f"üìö *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ—Ç–æ–∫:* {recommendation['stream']}\n"
            f"{recommendation['description']}\n\n"
            f"–î–ª—è –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ —Å–æ–±–æ–π –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, "
            f"–ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–∏–º –ø–æ—Ç–æ–∫–∞–º reLove! üåü\n\n"
            f"–ö–∞–∂–¥—ã–π –ø–æ—Ç–æ–∫ ‚Äî —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏, "
            f"–≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
            f"‚Ä¢ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –≥—Ä–∞–Ω–∏ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏\n"
            f"‚Ä¢ –†–∞–±–æ—Ç–∞—Ç—å —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –±–ª–æ–∫–∞–º–∏\n"
            f"‚Ä¢ –†–∞–∑–≤–∏–≤–∞—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å –∏ –∏–Ω—Ç—É–∏—Ü–∏—é\n"
            f"‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—É—Ö–æ–≤–Ω—ã–π –æ–ø—ã—Ç –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—É—é –∂–∏–∑–Ω—å\n"
            f"‚Ä¢ –ù–∞–π—Ç–∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        repo = get_repository()
        diagnostic_result = DiagnosticResult(
            user_id=callback.from_user.id,
            psychotype=PsychotypeEnum(psychotype.value),
            journey_stage=JourneyStageEnum(journey_stage.value),
            answers=answers,
            description=psychotype_desc.description,
            strengths=psychotype_desc.strengths,
            challenges=psychotype_desc.challenges,
            emotional_triggers=psychotype_desc.emotional_triggers,
            logical_patterns=psychotype_desc.logical_patterns,
            current_state=journey_desc.current_state,
            next_steps=journey_desc.next_steps,
            emotional_state=journey_desc.emotional_state,
            resistance_points=journey_desc.resistance_points,
            recommended_stream=recommendation['stream'],
            stream_description=recommendation['description']
        )
        await repo.create(diagnostic_result)
        
        await callback.message.edit_text(result_text)
        await state.clear()

@router.message(DiagnosticStates.ANSWERING)
async def handle_invalid_answer(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞, "
        "–∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º."
    ) 