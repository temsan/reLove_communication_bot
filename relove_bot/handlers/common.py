import logging
from aiogram import Router, types
from aiogram.filters import Command, CommandStart
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.exc import IntegrityError
from sqlalchemy import select
from ..rag.llm import LLM
from ..db.session import SessionLocal
from ..db.models import UserActivityLog, User, GenderEnum
from datetime import datetime
from relove_bot.db.memory_index import user_memory_index
from relove_bot.services.llm_service import llm_service
from relove_bot.services.prompts import MESSAGE_SUMMARY_PROMPT

logger = logging.getLogger(__name__)
router = Router()

from ..rag.pipeline import get_profile_summary
from ..db.vector import search_similar_users
from ..utils.user_utils import select_users
import logging

# –°–ø–∏—Å–æ–∫ Telegram user_id –∞–¥–º–∏–Ω–æ–≤
ADMIN_IDS = {123456789, 987654321}  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ id

from relove_bot.utils.profile_utils import fill_all_profiles
from relove_bot.config import settings
import asyncio

async def get_or_create_user(session: AsyncSession, tg_user: types.User) -> User:
    """Gets a user from DB or creates/updates it."""
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stmt = select(User).where(User.id == tg_user.id)
    result = await session.execute(stmt)
    db_user = result.scalar_one_or_none()

    if db_user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        update_needed = False
        if db_user.username != tg_user.username:
            db_user.username = tg_user.username
            update_needed = True
        if db_user.first_name != tg_user.first_name:
            db_user.first_name = tg_user.first_name
            update_needed = True
        if db_user.last_name != tg_user.last_name:
            db_user.last_name = tg_user.last_name
            update_needed = True
        if not db_user.is_active: # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º, –µ—Å–ª–∏ –±—ã–ª –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω
             db_user.is_active = True
             update_needed = True

        if update_needed:
            logger.info(f"Updating user data for {tg_user.id}")
            await session.commit()
        # –û–±–Ω–æ–≤–ª—è–µ–º last_seen –Ω–µ—è–≤–Ω–æ —á–µ—Ä–µ–∑ onupdate=func.now() –ø—Ä–∏ –ª—é–±–æ–º SELECT/UPDATE,
        # –Ω–æ –º–æ–∂–Ω–æ –∏ —è–≤–Ω–æ: db_user.last_seen_date = datetime.datetime.now(datetime.timezone.utc)

        return db_user
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
        logger.info(f"Creating new user for {tg_user.id}")
        new_user = User(
            id=tg_user.id,
            username=tg_user.username,
            first_name=tg_user.first_name or "", # first_name –º–æ–∂–µ—Ç –±—ã—Ç—å None?
            last_name=tg_user.last_name,
            gender=GenderEnum.female,  # female –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            is_active=True
            # registration_date —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            # is_admin –∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        )
        session.add(new_user)
        try:
            await session.commit()
            await session.refresh(new_user)
            return new_user
        except IntegrityError as e:
            logger.error(f"Integrity error creating user {tg_user.id}: {e}. Rolling back.")
            await session.rollback()
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–¥—Ä—É–≥ –≥–æ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π?
            result = await session.execute(select(User).where(User.id == tg_user.id))
            return result.scalar_one_or_none() # –ú–æ–∂–µ—Ç –±—ã—Ç—å None, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –≥–æ–Ω–∫–æ–π
        except Exception as e:
            logger.exception(f"Error creating user {tg_user.id}: {e}. Rolling back.")
            await session.rollback()
            return None

@router.message(CommandStart())
async def handle_start(message: types.Message, session: AsyncSession):
    """Handles the /start command, creates or updates user in DB."""
    tg_user = message.from_user
    db_user = await get_or_create_user(session, tg_user)

    if db_user:
        user_name = db_user.first_name # –ë–µ—Ä–µ–º –∏–º—è –∏–∑ –ë–î
        logger.info(f"User {user_name} (ID: {db_user.id}) started the bot.")
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n" \
            f"–Ø –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –†–µ–ª–∞–≤—ã, –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ.\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö."
        )
    else:
         logger.error(f"Failed to get or create user for ID {tg_user.id}")
         await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command(commands=["admin_update_summaries"]))
async def handle_admin_update_summaries(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    await message.reply("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ summary –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–ø—É—â–µ–Ω–æ!")
    # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
    asyncio.create_task(fill_all_profiles(settings.channel_id))
    await message.reply("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–µ. –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ª–æ–≥–∞—Ö.")

@router.message(Command(commands=["admin_find_users"]))
async def handle_admin_find_users(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    args = message.get_args() if hasattr(message, 'get_args') else message.text[len("/admin_find_users"):].strip()
    # –ü–∞—Ä—Å–∏–º —Ñ–∏–ª—å—Ç—Ä—ã: gender=, —Ç–µ–∫—Å—Ç=, rank_by=, limit=
    filters = {}
    for part in args.split():
        if '=' in part:
            k, v = part.split('=', 1)
            filters[k.strip()] = v.strip()
    gender = filters.get('gender')
    text_filter = filters.get('—Ç–µ–∫—Å—Ç') or filters.get('text')
    rank_by = filters.get('rank_by')
    try:
        limit = int(filters.get('limit', 20))
    except Exception:
        limit = 20
    # –í—ã–±–æ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try:
        users = await select_users(gender=gender, text_filter=text_filter, rank_by=rank_by, limit=limit)
        if not users:
            await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
            return
        lines = [f"id | username | gender | summary"]
        for u in users:
            lines.append(f"{u['id']} | @{u['username']} | {u['gender']} | {(u['summary'] or '')[:60]}")
        text = '\n'.join(lines)
        if len(text) > 4000:
            text = text[:3990] + '\n...'
        await message.reply(text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_admin_find_users: {e}")
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

@router.message(Command(commands=["admin_user_info"]))
async def handle_admin_user_info(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    args = message.get_args() if hasattr(message, 'get_args') else message.text[len("/admin_user_info"):].strip()
    user_id = None
    for part in args.split():
        if part.startswith("user_id="):
            try:
                user_id = int(part.split("=", 1)[1])
            except Exception:
                pass
    if not user_id:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ user_id: /admin_user_info user_id=123456")
        return
    try:
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –ø–∞–º—è—Ç–∏
        user = user_memory_index.find_by_id(user_id) if user_memory_index else None
        if not user:
            async with SessionLocal() as session:
                user = await session.get(User, user_id)
        if not user:
            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id={user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        context = user.context or {}
        summary = context.get('summary')
        gender = context.get('gender')
        info = (
            f"ID: {user.id}\n"
            f"Username: @{user.username}\n"
            f"–ò–º—è: {user.first_name or ''} {user.last_name or ''}\n"
            f"is_active: {user.is_active}\n"
            f"Gender: {gender}\n"
            f"Summary: {summary or '-'}\n"
        )
        ctx_str = str(context)
        if len(ctx_str) < 1500:
            info += f"Context: {ctx_str}\n"
        else:
            info += f"Context: —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(ctx_str)} —Å–∏–º–≤–æ–ª–æ–≤)\n"
        await message.reply(info)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_admin_user_info: {e}")
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")

@router.message()
async def handle_message(message: types.Message):
    try:
        llm = LLM()
        summary_struct = await llm.analyze_content(text=message.text)
        summary = summary_struct['summary']
        async with SessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await session.get(User, message.from_user.id)
            if not user:
                user = User(
                    id=message.from_user.id,
                    username=message.from_user.username,
                    first_name=message.from_user.first_name,
                    last_name=message.from_user.last_name,
                    is_active=True,
                    context={}
                )
                session.add(user)
            # –û–±–Ω–æ–≤–ª—è–µ–º context: summary –∏ relove_context
            user.context = user.context or {}
            user.context['last_message'] = message.text
            user.context['summary'] = summary
            # –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å relove_context —á–µ—Ä–µ–∑ get_profile_summary –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            profile_summary = await get_profile_summary(message.from_user.id, session)
            user.context['relove_context'] = profile_summary
            await session.commit()
            relove_context = user.context.get("relove_context")
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if relove_context:
            prompt = (
                f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {relove_context}\n"
                f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.text}\n"
                f"–î–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏—è –≤ –ø–æ—Ç–æ–∫–µ reLove."
            )
        else:
            prompt = (
                f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (summary): {summary}\n"
                f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.text}\n"
                f"–î–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏—è –≤ –ø–æ—Ç–æ–∫–µ reLove."
            )
        feedback = await generate_rag_answer(context="", question=prompt)
        await message.answer(feedback)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_message: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command(commands=["similar"]))
async def handle_similar(message: types.Message):
    try:
        args = message.get_args().strip()
        top_k = 5
        if args.isdigit():
            top_k = int(args)
        async with SessionLocal() as session:
            profile_summary = await get_profile_summary(message.from_user.id, session)
        if not profile_summary:
            await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –µ—â—ë –Ω–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.")
            return
        query_embedding = await get_text_embedding(profile_summary)
        hits = search_similar_users(query_embedding, top_k=top_k)
        if not hits:
            await message.answer("–ü–æ—Ö–æ–∂–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        response = "–ü–æ—Ö–æ–∂–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
        for hit in hits:
            user_id = hit.id
            username = hit.payload.get("username") if hit.payload else None
            user_context = hit.payload.get("context") if hit.payload else None
            response += f"ID: {user_id} | username: {username or '-'} | –∫–æ–Ω—Ç–µ–∫—Å—Ç: {user_context or '-'}\n"
        await message.answer(response)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ /similar: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ—Ö–æ–∂–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command(commands=["help"]))
async def handle_help(message: types.Message):
    """Handles the /help command."""
    user_name = message.from_user.full_name
    user_id = message.from_user.id
    logger.info(f"User {user_name} (ID: {user_id}) requested help.")
    # TODO: –î–æ–ø–æ–ª–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –º–µ—Ä–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
    help_text = (
        "‚ÑπÔ∏è **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:**\\n\\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:\\n"
        "- –£–∑–Ω–∞–≤–∞—Ç—å –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö (–ø–æ—Ç–æ–∫–∞—Ö, —Ä–∏—Ç—É–∞–ª–∞—Ö).\\n"
        "- –†–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\\n"
        "- (–í –±—É–¥—É—â–µ–º) –°–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–≤–æ–∏–º \\\"–ü—É—Ç–µ–º –ì–µ—Ä–æ—è\\\" –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ.\\n\\n"
        "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\\n"
        # "/events - –ü–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\\n"
        # "/my_registrations - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\\n"
    )
    await message.answer(help_text, parse_mode="HTML")

async def analyze_message(message: str) -> str:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        
    Returns:
        str: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        result = await llm_service.analyze_text(
            text=message,
            system_prompt=MESSAGE_SUMMARY_PROMPT,
            max_tokens=64
        )
        
        if not result:
            return ''
            
        return result.strip()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        return ''