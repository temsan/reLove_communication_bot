import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from ..core.psychological_types import PsychotypeEnum, PSYCHOLOGICAL_TYPES
from ..core.hero_journey import JourneyStageEnum, JOURNEY_STAGES
from ..keyboards.psychological import (
    get_psychological_type_keyboard,
    get_journey_stage_keyboard,
    get_question_keyboard
)
from ..db.models import User, DiagnosticResult
from ..states.diagnostic_states import DiagnosticStates

logger = logging.getLogger(__name__)
router = Router()

@router.message(Command("start_journey"))
async def start_psychological_journey(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"""
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ! üß†‚ú®\n\n"
        "–î–∞–≤–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º –≤–∞—à –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–∏–ø, —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å, "
        "–∫–∞–∫ –ø–æ–º–æ—á—å –≤–∞–º –≤ –≤–∞—à–µ–º –ø—É—Ç–∏.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –±–ª–∏–∂–µ –≤—Å–µ–≥–æ:",
        reply_markup=get_psychological_type_keyboard()
    )
    await state.set_state(DiagnosticStates.WAITING_FOR_TYPE)

@router.callback_query(DiagnosticStates.WAITING_FOR_TYPE)
async def process_psychological_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–∏–ø–∞"""
    try:
        psychological_type = PsychotypeEnum(callback.data)
        await state.update_data(psychological_type=psychological_type)
        
        profile = PSYCHOLOGICAL_TYPES[psychological_type]
        await callback.message.edit_text(
            f"–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø: {profile.type.value}\n\n"
            f"–í–∞—à–∏ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —á–µ—Ä—Ç—ã:\n" + 
            "\n".join(f"‚Ä¢ {trait.name}: {trait.description}" 
                     for trait in profile.dominant_traits) + 
            "\n\n–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –≤–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ. "
            "–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–ø, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å:",
            reply_markup=get_journey_stage_keyboard()
        )
        await state.set_state(DiagnosticStates.WAITING_FOR_JOURNEY_STAGE)
    except Exception as e:
        logger.error(f"Error processing psychological type: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start_journey"
        )
        await state.clear()

@router.callback_query(DiagnosticStates.WAITING_FOR_JOURNEY_STAGE)
async def process_journey_stage(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —ç—Ç–∞–ø–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"""
    try:
        stage = JourneyStageEnum(callback.data)
        data = await state.get_data()
        psychological_type = PsychotypeEnum(data["psychological_type"])
        
        stage_info = JOURNEY_STAGES[stage]
        profile = PSYCHOLOGICAL_TYPES[psychological_type]
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ–¥ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–∏–ø
        adapted_questions = adapt_questions_to_type(
            stage_info.questions,
            profile
        )
        
        await state.update_data(
            current_stage=stage,
            current_question_index=0,
            adapted_questions=adapted_questions,
            answers={}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
        )
        
        await callback.message.edit_text(
            f"–≠—Ç–∞–ø: {stage_info.name}\n\n"
            f"{stage_info.description}\n\n"
            f"–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:\n{adapted_questions[0]}",
            reply_markup=get_question_keyboard()
        )
        await state.set_state(DiagnosticStates.answering_questions)
    except Exception as e:
        logger.error(f"Error processing journey stage: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start_journey"
        )
        await state.clear()

@router.message(DiagnosticStates.answering_questions)
async def process_answer(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"""
    try:
        data = await state.get_data()
        current_index = data["current_question_index"]
        adapted_questions = data["adapted_questions"]
        answers = data["answers"]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        answers[adapted_questions[current_index]] = message.text
        
        if current_index + 1 < len(adapted_questions):
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            await state.update_data(
                current_question_index=current_index + 1,
                answers=answers
            )
            await message.answer(
                f"–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n{adapted_questions[current_index + 1]}",
                reply_markup=get_question_keyboard()
            )
        else:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —ç—Ç–∞–ø –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            stage = JourneyStageEnum(data["current_stage"])
            psychological_type = PsychotypeEnum(data["psychological_type"])
            stage_info = JOURNEY_STAGES[stage]
            profile = PSYCHOLOGICAL_TYPES[psychological_type]
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            async with AsyncSession() as session:
                diagnostic_result = DiagnosticResult(
                    user_id=message.from_user.id,
                    psychotype=psychological_type,
                    journey_stage=stage,
                    answers=answers,
                    description=stage_info.description,
                    strengths=profile.dominant_traits,
                    challenges=stage_info.resistance_patterns,
                    emotional_triggers=stage_info.emotional_triggers,
                    logical_patterns=profile.resistance_patterns,
                    current_state=stage_info.psychological_impact,
                    next_steps=adapted_questions,
                    emotional_state=stage_info.emotional_triggers[0] if stage_info.emotional_triggers else None,
                    resistance_points=stage_info.resistance_patterns
                )
                session.add(diagnostic_result)
                await session.commit()
            
            await message.answer(
                f"–û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —ç—Ç–∞–ø '{stage_info.name}'.\n\n"
                "–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.\n\n"
                "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ? –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø:",
                reply_markup=get_journey_stage_keyboard()
            )
            await state.set_state(DiagnosticStates.WAITING_FOR_JOURNEY_STAGE)
    except Exception as e:
        logger.error(f"Error processing answer: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start_journey"
        )
        await state.clear()

def adapt_questions_to_type(questions: list, profile: PsychologicalProfile) -> list:
    """–ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ–¥ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    adapted_questions = []
    for question in questions:
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞
        if profile.type == PsychotypeEnum.EMOTIONAL:
            question = f"–ö–∞–∫ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è, –∫–æ–≥–¥–∞ {question.lower()}"
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–∏–ø–∞
        elif profile.type == PsychotypeEnum.PRACTICAL:
            question = f"–ö–∞–∫–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã {question.lower()}"
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–∏–ø–∞
        elif profile.type == PsychotypeEnum.ANALYTICAL:
            question = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ, –ø–æ—á–µ–º—É {question.lower()}"
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–≥–æ —Ç–∏–ø–∞
        elif profile.type == PsychotypeEnum.INTUITIVE:
            question = f"–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ {question.lower()}"
        adapted_questions.append(question)
    return adapted_questions 