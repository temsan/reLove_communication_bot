import asyncio
import logging
import sys
from typing import Tuple
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.fsm.storage.base import BaseStorage
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.types import BotCommand, BotCommandScopeDefault

from .config import settings
from .handlers import (
    psychological_journey,
    platform_integration,
    common,
    admin,
    provocative_natasha,
    flexible_diagnostic
)
from .middlewares.database import DatabaseMiddleware
from .middlewares.logging import LoggingMiddleware
from .middlewares.session_conflict import SessionConflictMiddleware
from .db.session import async_session

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL),
    format=settings.LOG_FORMAT,
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler(settings.log_file_path)
    ]
)
logger = logging.getLogger(__name__)

def create_bot_and_dispatcher(storage: BaseStorage = None) -> Tuple[Bot, Dispatcher]:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞.
    :param storage: –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è FSM (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é MemoryStorage)
    :return: –∫–æ—Ä—Ç–µ–∂ (bot, dispatcher)
    """
    try:
        bot = Bot(token=settings.bot_token.get_secret_value(), parse_mode=ParseMode.HTML)
        # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º MemoryStorage –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
        storage = MemoryStorage()
        dp = Dispatcher(storage=storage)
        logger.info("Bot and Dispatcher initialized with MemoryStorage.")
        return bot, dp
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞/–¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞: {e}")
        raise

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
bot, dp = create_bot_and_dispatcher()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware
dp.update.middleware(DatabaseMiddleware(async_session))
dp.update.middleware(LoggingMiddleware())
dp.update.middleware(SessionConflictMiddleware())

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
dp.include_router(common.router)
dp.include_router(admin.router)
dp.include_router(psychological_journey.router)
dp.include_router(platform_integration.router)
dp.include_router(provocative_natasha.router)
dp.include_router(flexible_diagnostic.router)

# –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
DEFAULT_COMMANDS = [
    BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
    BotCommand(command="help", description="‚ùì –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
    BotCommand(command="start_journey", description="üéØ –ü—Ä–æ–π—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø—Å–∏—Ö–æ—Ç–∏–ø–∞ –∏ –ø—É—Ç–∏ –≥–µ—Ä–æ—è"),
    BotCommand(command="diagnostic", description="üí¨ –ì–∏–±–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥ (LLM)"),
    BotCommand(command="natasha", description="üî• –ü—Ä–æ–≤–æ–∫–∞—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —Å –ù–∞—Ç–∞—à–µ–π"),
    BotCommand(command="my_session_summary", description="üìä –°–≤–æ–¥–∫–∞ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"),
    BotCommand(command="my_metaphysical_profile", description="üåå –ú–æ–π –º–µ—Ç–∞—Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å"),
    BotCommand(command="streams", description="üåÄ –ü–æ—Ç–æ–∫–∏ reLove"),
    BotCommand(command="analyze_readiness", description="üìà –ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–æ—Ç–æ–∫–∞–º"),
    BotCommand(command="end_session", description="üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é"),
    BotCommand(command="platform", description="üåü –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É relove.ru"),
]

ADMIN_COMMANDS = [
    BotCommand(command="fill_profiles", description="[–ê–¥–º–∏–Ω] –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏–º–∏—Ç–∞—Ü–∏—è)"),
    BotCommand(command="broadcast", description="[–ê–¥–º–∏–Ω] –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"),
]

async def setup_bot_commands(bot_instance: Bot = None) -> None:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –±–æ—Ç–∞.
    :param bot_instance: —ç–∫–∑–µ–º–ø–ª—è—Ä Bot (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥–ª–æ–±–∞–ª—å–Ω—ã–π bot)
    """
    if bot_instance is None:
        bot_instance = bot
    try:
        await bot_instance.set_my_commands(DEFAULT_COMMANDS, BotCommandScopeDefault())
        logger.info("Bot commands set.")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if settings.admin_ids:
            all_commands = DEFAULT_COMMANDS + ADMIN_COMMANDS
            admin_scopes = [BotCommandScopeDefault(chat_id=admin_id) for admin_id in settings.admin_ids]
            for scope in admin_scopes:
                try:
                    await bot_instance.set_my_commands(all_commands, scope)
                except Exception as e:
                    logger.error(f"Failed to set commands for admin scope {scope.chat_id}: {e}")
            logger.info(f"Admin commands set for {len(settings.admin_ids)} admins.")
        else:
            logger.info("Bot commands set for default scope only (no admins configured).")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
        await setup_bot_commands()
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("Starting bot...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped!")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        sys.exit(1)