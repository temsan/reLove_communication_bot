import logging
from typing import Tuple
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.fsm.storage.base import BaseStorage
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BotCommand, BotCommandScopeDefault

from .config import settings

logger = logging.getLogger(__name__)


def create_bot_and_dispatcher(storage: BaseStorage = None) -> Tuple[Bot, Dispatcher]:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞.
    :param storage: –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è FSM (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é MemoryStorage)
    :return: –∫–æ—Ä—Ç–µ–∂ (bot, dispatcher)
    """
    try:
        bot = Bot(token=settings.bot_token.get_secret_value(), parse_mode=ParseMode.HTML)
        if storage is None:
            storage = MemoryStorage()
        dp = Dispatcher(storage=storage)
        logger.info("Bot and Dispatcher initialized successfully.")
        return bot, dp
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞/–¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞: {e}")
        raise

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
bot, dp = create_bot_and_dispatcher()

# –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
DEFAULT_COMMANDS = [
    BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
    BotCommand(command="help", description="‚ùì –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
    # –î–æ–±–∞–≤–ª—è–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å—é–¥–∞
]

def include_routers(dispatcher: Dispatcher = None) -> None:
    """
    –ü–æ–¥–∫–ª—é—á–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä—ã –∏–∑ –º–æ–¥—É–ª—è handlers. –î–æ–±–∞–≤–ª—è–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ä–æ—É—Ç–µ—Ä—ã –∑–¥–µ—Å—å.
    :param dispatcher: —ç–∫–∑–µ–º–ø–ª—è—Ä Dispatcher (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥–ª–æ–±–∞–ª—å–Ω—ã–π dp)
    """
    if dispatcher is None:
        dispatcher = dp
    try:
        from .handlers import common  # –ò–º–ø–æ—Ä—Ç –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        dispatcher.include_router(common.router)
        logger.info("Common router included.")
        # TODO: –î–æ–±–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏–µ —Ä–æ—É—Ç–µ—Ä—ã –ø–æ –º–µ—Ä–µ –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤: {e}")


async def setup_bot_commands(bot_instance: Bot = None) -> None:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –±–æ—Ç–∞.
    :param bot_instance: —ç–∫–∑–µ–º–ø–ª—è—Ä Bot (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥–ª–æ–±–∞–ª—å–Ω—ã–π bot)
    """
    if bot_instance is None:
        bot_instance = bot
    try:
        await bot_instance.set_my_commands(DEFAULT_COMMANDS, BotCommandScopeDefault())
        logger.info("Bot commands set.")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}")