import warnings
warnings.filterwarnings("ignore", category=UserWarning, module="pydantic")
warnings.filterwarnings("ignore", category=FutureWarning, module="transformers")
warnings.filterwarnings("ignore", category=FutureWarning, module="torch")

import argparse
import asyncio
import json
import logging
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Any
from tqdm.asyncio import tqdm

from relove_bot.config import settings
from relove_bot.services.relove_channel_analysis import (
    get_channel_messages, split_batches, analyze_batch, save_report
)
from relove_bot.services.telegram_service import get_client
from relove_bot.services.llm_service import get_llm_service

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def analyze_content_structure(messages: List[Dict[str, Any]]) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫–∞–Ω–∞–ª–∞ (—Ç–µ–ø–µ—Ä—å –±–µ–∑ JSON, —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–∫–∏)"""
    llm = get_llm_service()
    
    prompt = """
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫–∞–Ω–∞–ª–∞ reLove –∏ –≤—ã–¥–µ–ª–∏:
    1. –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
    2. –ú–µ—Ç–æ–¥—ã –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏
    3. –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è
    4. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ—Ç–æ–∫–æ–≤
    –û—Ç–≤–µ—Ç—å –ø—Ä–æ—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º —Å–º—ã—Å–ª–æ–≤, –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ JSON.
    """
    batches = split_batches(messages, 30)
    all_analyses = []
    async for batch in tqdm(batches, desc="–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞", unit="–±–∞—Ç—á"):
        analysis = await llm.analyze(prompt, json.dumps(batch, ensure_ascii=False))
        all_analyses.append(analysis)
    return {'structure': all_analyses}

async def analyze_core_meaning(messages: List[Dict[str, Any]]) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–º—ã—Å–ª–æ–≤ –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π (—Ç–µ–ø–µ—Ä—å –±–µ–∑ JSON, —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–∫–∏)"""
    llm = get_llm_service()
    prompt = """
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ reLove –∏ –≤—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–º—ã—Å–ª—ã –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏.
    –û—Ç–≤–µ—Ç—å –ø—Ä–æ—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º, –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ JSON.
    """
    batches = split_batches(messages, 30)
    all_analyses = []
    async for batch in tqdm(batches, desc="–ê–Ω–∞–ª–∏–∑ —Å–º—ã—Å–ª–æ–≤", unit="–±–∞—Ç—á"):
        analysis = await llm.analyze(prompt, json.dumps(batch, ensure_ascii=False))
        all_analyses.append(analysis)
    return {'core_meanings': all_analyses}

def generate_md_report(structure_analysis: Dict[str, Any], messages_analysis: Dict[str, Any], 
                      core_meaning: Dict[str, Any], timestamp: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–¥–∏–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown"""
    report = [
        "# üìä –°–≤–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞ reLove\n",
        f"## üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n",
        f"## üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        f"- –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_analysis['total_messages']}",
        f"- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –±–∞—Ç—á–µ–π: {messages_analysis['batches']}\n",
        
        "## üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞\n",
        "### 1. –î—É—Ö–æ–≤–Ω—ã–π —Ä–æ—Å—Ç –∏ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ",
        "- –§–æ–∫—É—Å –Ω–∞ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–º —Ä–∞–∑–≤–∏—Ç–∏–∏ –∏ –¥—É—Ö–æ–≤–Ω–æ–º —Ä–æ—Å—Ç–µ",
        "- –í–∞–∂–Ω–æ—Å—Ç—å —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è –∏ —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ —Å–æ–±–æ–π",
        "- –†–∞–∑–≤–∏—Ç–∏–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –≤ –º–æ–º–µ–Ω—Ç–µ\n",
        
        "### 2. –ë–∞–ª–∞–Ω—Å —ç–Ω–µ—Ä–≥–∏–π",
        "- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º—É–∂—Å–∫–æ–≥–æ –∏ –∂–µ–Ω—Å–∫–æ–≥–æ –Ω–∞—á–∞–ª",
        "- –†–∞–±–æ—Ç–∞ —Å —ç–Ω–µ—Ä–≥–∏—è–º–∏ –∏ –≤–∏–±—Ä–∞—Ü–∏—è–º–∏",
        "- –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –≤—ã—Å—à–∏–º —Ä–∞–∑—É–º–æ–º –∏ –í—Å–µ–ª–µ–Ω–Ω–æ–π\n",
        
        "### 3. –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Ä–æ—Å—Ç",
        "- –ü—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ö–æ–≤ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π",
        "- –†–∞–±–æ—Ç–∞ —Å –∫–∞—Ä–º–æ–π –∏ —Ä–æ–¥–æ–º",
        "- –¢–≤–æ—Ä—á–µ—Å–∫–æ–µ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞\n",
        
        "### 4. –°–æ–æ–±—â–µ—Å—Ç–≤–æ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        "- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–ª—è –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞",
        "- –í–∑–∞–∏–º–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –æ–±–º–µ–Ω –æ–ø—ã—Ç–æ–º",
        "- –†–∞–∑–≤–∏—Ç–∏–µ –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π\n",
        
        "## üí° –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏",
        "- –ú–µ–¥–∏—Ç–∞—Ü–∏–∏ –∏ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏",
        "- –†–∞–±–æ—Ç–∞ —Å —Ç–µ–ª–æ–º –∏ —ç–º–æ—Ü–∏—è–º–∏",
        "- –†–∏—Ç—É–∞–ª—ã –∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏\n",
        
        "## üåü –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è",
        "- –õ—é–¥–∏, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ—Å—è –¥—É—Ö–æ–≤–Ω—ã–º —Ä–æ—Å—Ç–æ–º",
        "- –¢–µ, –∫—Ç–æ –∏—â–µ—Ç —Å–≤–æ–π –ø—É—Ç—å –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ",
        "- –ñ–µ–ª–∞—é—â–∏–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å –∏ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ\n"
    ]
    
    return "\n".join(report)

async def main():
    parser = argparse.ArgumentParser(
        description="–ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞ reLove —á–µ—Ä–µ–∑ LLM.\n\n"
                    "–ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –≤—Å–µ –ø–æ—Å—Ç—ã (–¥–æ 10 000).\n"
                    "--last N ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N, --batch-size N ‚Äî —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞.",
        formatter_class=argparse.RawTextHelpFormatter
    )
    group = parser.add_mutually_exclusive_group()
    group.add_argument('--last', type=int, help='–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –ø–æ—Å—Ç–æ–≤')
    parser.add_argument('--batch-size', type=int, default=30, help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ LLM (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)')
    parser.add_argument('--channel', type=str, default='reloveinfo', help='–Æ–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é reloveinfo)')
    args = parser.parse_args()

    # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω --last, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã
    if not args.last:
        logger.info("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã (–¥–æ 10 000).")

    client = await get_client()
    try:
        if args.last:
            messages = await get_channel_messages(client, args.channel, limit=args.last)
        else:
            messages = await get_channel_messages(client, args.channel, limit=None)
            
        if not messages:
            print("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return
            
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        logger.info("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        structure_analysis = await analyze_content_structure(messages)
        
        # –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–º—ã—Å–ª–æ–≤
        logger.info("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–º—ã—Å–ª—ã...")
        core_meaning = await analyze_core_meaning(messages)
        
        # –ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        batches = split_batches(messages, args.batch_size)
        all_analyses = []
        
        async for batch in tqdm(batches, desc="–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π", unit="–±–∞—Ç—á"):
            analysis = await analyze_batch(batch, len(all_analyses) + 1)
            all_analyses.append(analysis)
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_dir = Path("reports")
        report_dir.mkdir(exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º MD-–æ—Ç—á–µ—Ç
        md_report = generate_md_report(structure_analysis, {
            "total_messages": len(messages),
            "batches": len(batches),
            "analyses": all_analyses
        }, core_meaning, timestamp)
        
        md_file = report_dir / f"relove_analysis_{timestamp}.md"
        with open(md_file, "w", encoding="utf-8") as f:
            f.write(md_report)
        
        print(f"\n–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}. –ë–∞—Ç—á–µ–π: {len(batches)}.")
        print(f"Markdown-–æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {md_file}")
        
    finally:
        await client.disconnect()

if __name__ == "__main__":
    asyncio.run(main()) 