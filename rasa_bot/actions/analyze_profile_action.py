from typing import Any, Text, Dict, List
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import SlotSet, UserUttered, ActionExecuted
import logging

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ —Å–µ—Ä–≤–∏—Å—ã
from ..services.profile_analysis_service import get_profile_analysis_service
from ..services.message_history_service import get_message_history_service
from ..db_service import get_db_service

logger = logging.getLogger(__name__)

class ActionAnalyzeUserProfile(Action):
    """–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—â–µ–Ω–∏—è"""
    
    def name(self) -> Text:
        return "action_analyze_user_profile"
    
    async def run(self, dispatcher: CollectingDispatcher,
                 tracker: Tracker,
                 domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = tracker.sender_id
        try:
            user_id = int(user_id)
        except (ValueError, TypeError):
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            dispatcher.utter_message("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        profile_service = get_profile_analysis_service()
        message_service = get_message_history_service()
        db_service = get_db_service()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = db_service.get_user_by_id(user_id)
        if not user_data:
            dispatcher.utter_message("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return []
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        dispatcher.utter_message("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ –∏—Å—Ç–æ—Ä–∏—é –æ–±—â–µ–Ω–∏—è...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        profile_analysis = profile_service.analyze_user_profile(user_id)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        conversation_analysis = message_service.analyze_conversation_patterns(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        self._send_analysis_report(dispatcher, user_data, profile_analysis, conversation_analysis)
        
        return []
    
    def _send_analysis_report(self, 
                            dispatcher: CollectingDispatcher,
                            user_data: Dict[str, Any],
                            profile_analysis: Dict[str, Any],
                            conversation_analysis: Dict[str, Any]) -> None:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –∞–Ω–∞–ª–∏–∑–µ"""
        try:
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_name = user_data.get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            
            # –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            messages = [f"üìä –û—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –ø—Ä–æ—Ñ–∏–ª—è {user_name}:"]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if profile_analysis.get("status") == "success":
                analysis = profile_analysis.get("analysis", {})
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                if "recommendations" in analysis and analysis["recommendations"]:
                    messages.append("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                    for rec in analysis["recommendations"][:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                        messages.append(f"‚Ä¢ {rec}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞
                if "risk_factors" in analysis and analysis["risk_factors"]:
                    risk_factors = [rf for rf in analysis["risk_factors"] 
                                  if rf.get("level") in ["high", "critical"]]
                    
                    if risk_factors:
                        messages.append("\n‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:")
                        for risk in risk_factors:
                            messages.append(f"‚Ä¢ {risk['description']}")
                            if risk.get("suggestion"):
                                messages.append(f"  ‚Üí {risk['suggestion']}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –±–µ—Å–µ–¥—ã, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if conversation_analysis.get("status") == "success":
                messages.append("\nüí¨ –ê–Ω–∞–ª–∏–∑ –æ–±—â–µ–Ω–∏—è:")
                
                # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                if "avg_messages_per_day" in conversation_analysis:
                    messages.append(
                        f"‚Ä¢ –í —Å—Ä–µ–¥–Ω–µ–º –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ {conversation_analysis['avg_messages_per_day']} "
                        f"—Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å (–≤—Å–µ–≥–æ {conversation_analysis.get('message_count', 0)} —Å–æ–æ–±—â–µ–Ω–∏–π)"
                    )
                
                # –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
                if "mood_analysis" in conversation_analysis:
                    mood_map = {
                        "positive": "–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ",
                        "negative": "–Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ",
                        "neutral": "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ"
                    }
                    dominant_mood = conversation_analysis["mood_analysis"].get("dominant_mood", "neutral")
                    messages.append(f"‚Ä¢ –ü—Ä–µ–æ–±–ª–∞–¥–∞—é—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood_map.get(dominant_mood, '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ')}")
                
                # –ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                if "peak_hours" in conversation_analysis and conversation_analysis["peak_hours"]:
                    messages.append(
                        f"‚Ä¢ –ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {', '.join(conversation_analysis['peak_hours'])}"
                    )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            messages.extend([
                "\nüìå –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:",
                "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
                "‚Ä¢ –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ",
                "‚Ä¢ –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ä–∞–±–æ—Ç–æ–π –∏ –æ—Ç–¥—ã—Ö–æ–º"
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Å—Ç—è–º–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
            current_message = ""
            for part in messages:
                if len(current_message) + len(part) > 3000:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                    dispatcher.utter_message(current_message)
                    current_message = part + "\n"
                else:
                    current_message += "\n" + part if current_message else part
            
            if current_message:
                dispatcher.utter_message(current_message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            dispatcher.utter_message("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

class ActionUpdateEmotionalState(Action):
    """–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def name(self) -> Text:
        return "action_update_emotional_state"
    
    async def run(self, dispatcher: CollectingDispatcher,
                 tracker: Tracker,
                 domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = tracker.sender_id
        try:
            user_id = int(user_id)
        except (ValueError, TypeError):
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            dispatcher.utter_message("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.")
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
        emotional_state = tracker.get_slot("emotional_state")
        
        if not emotional_state:
            dispatcher.utter_message("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.")
            return []
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –≤ –ø—Ä–æ—Ñ–∏–ª–µ
        db_service = get_db_service()
        success = db_service.update_user_marker(user_id, "emotional_state", emotional_state)
        
        if success:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            message_history_service = get_message_history_service()
            message_history_service.log_activity(
                user_id=user_id,
                activity_type="emotional_state_updated",
                details={"state": emotional_state}
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
            responses = {
                "happy": "–†–∞–¥, —á—Ç–æ —É –≤–∞—Å —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! üòä",
                "sad": "–ú–Ω–µ –∂–∞–ª—å —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å, —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤—ã—Å–ª—É—à–∞—Ç—å. üòî",
                "anxious": "–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Ç—Ä–µ–≤–æ–≥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≥–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö. üßò‚Äç‚ôÇÔ∏è",
                "calm": "–ü—Ä–∏—è—Ç–Ω–æ –≤–∏–¥–µ—Ç—å, —á—Ç–æ –≤—ã —Å–ø–æ–∫–æ–π–Ω—ã. üåø",
                "excited": "–ó–¥–æ—Ä–æ–≤–æ, —á—Ç–æ –≤—ã –ø–æ–ª–Ω—ã —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞! üéâ",
                "tired": "–ü–æ—Ö–æ–∂–µ, –≤–∞–º –Ω—É–∂–µ–Ω –æ—Ç–¥—ã—Ö. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Å–µ–±–µ. üí§"
            }
            
            response = responses.get(emotional_state, 
                                  "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —Å–≤–æ–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ª—É—á—à–µ –≤–∞—Å –ø–æ–Ω—è—Ç—å.")
            dispatcher.utter_message(response)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if emotional_state in ["sad", "anxious"]:
                dispatcher.utter_message("–ï—Å–ª–∏ –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –æ–±—Å—É–¥–∏—Ç—å —ç—Ç–æ —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º.")
            
        else:
            dispatcher.utter_message("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        return [SlotSet("emotional_state", None)]

class ActionGetUserInsights(Action):
    """–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    
    def name(self) -> Text:
        return "action_get_user_insights"
    
    async def run(self, dispatcher: CollectingDispatcher,
                 tracker: Tracker,
                 domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = tracker.sender_id
        try:
            user_id = int(user_id)
        except (ValueError, TypeError):
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            dispatcher.utter_message("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        message_service = get_message_history_service()
        db_service = get_db_service()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = db_service.get_user_by_id(user_id)
        if not user_data:
            dispatcher.utter_message("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
        engagement = message_service.get_user_engagement_metrics(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å–∞–π—Ç–∞–º–∏
        messages = ["üí° –í–æ—Ç —á—Ç–æ —è –∑–∞–º–µ—Ç–∏–ª(–∞) –≤ –≤–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:"]
        
        if engagement.get("status") == "success":
            messages.append(
                f"‚Ä¢ –í—ã –∞–∫—Ç–∏–≤–Ω—ã –≤ —Å—Ä–µ–¥–Ω–µ–º {engagement.get('avg_activities_per_day', 0)} —Ä–∞–∑ –≤ –¥–µ–Ω—å"
            )
            
            if engagement.get("peak_day"):
                messages.append(
                    f"‚Ä¢ –í–∞—à —Å–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å: {engagement['peak_day']['date']} "
                    f"({engagement['peak_day']['count']} –¥–µ–π—Å—Ç–≤–∏–π)"
                )
            
            # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            activity_types = engagement.get("activity_by_type", {})
            if activity_types:
                top_activities = sorted(activity_types.items(), key=lambda x: x[1], reverse=True)[:3]
                messages.append("\n–ß–∞—â–µ –≤—Å–µ–≥–æ –≤—ã:")
                for activity, count in top_activities:
                    activity_name = self._get_activity_name(activity)
                    messages.append(f"‚Ä¢ {activity_name}: {count} —Ä–∞–∑")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        messages.extend([
            "\nüìå –°–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:",
            "‚Ä¢ –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –≤ —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫",
            "‚Ä¢ –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤—ã –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã",
            "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞"
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        dispatcher.utter_message("\n".join(messages))
        
        return []
    
    def _get_activity_name(self, activity_type: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        names = {
            "message": "–û—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
            "command": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∫–æ–º–∞–Ω–¥—ã",
            "button_press": "–ù–∞–∂–∏–º–∞–ª–∏ –∫–Ω–æ–ø–∫–∏",
            "profile_view": "–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å",
            "emotional_state_updated": "–û—Ç–º–µ—á–∞–ª–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
        }
        return names.get(activity_type, activity_type)
