from typing import Any, Text, Dict, List, Optional
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import SlotSet, UserUttered, ActionExecuted, SessionStarted
import logging
import json

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
from ..db_service import get_db_service
from ..services.profile_service import ProfileService
from ..enums.gender_enum import GenderEnum

logger = logging.getLogger(__name__)
db_service = get_db_service()

class ActionGetUserProfile(Action):
    """–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def name(self) -> Text:
        return "action_get_user_profile"
    
    async def run(self, dispatcher: CollectingDispatcher,
                 tracker: Tracker,
                 domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ª–æ—Ç–æ–≤ –∏–ª–∏ –∏–∑ sender_id
        user_id = tracker.sender_id
        try:
            user_id = int(user_id)
        except (ValueError, TypeError):
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            dispatcher.utter_message("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user_data = db_service.get_user_by_id(user_id)
        if not user_data:
            dispatcher.utter_message("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return []
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        message = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data.get('first_name', '')}:"
        
        if user_data.get('gender'):
            gender = "–ú—É–∂—Å–∫–æ–π" if user_data['gender'] == 'male' else "–ñ–µ–Ω—Å–∫–∏–π"
            message += f"\n‚Ä¢ –ü–æ–ª: {gender}"
            
        if user_data.get('profile_summary'):
            message += f"\n\nüìù –û –ø—Ä–æ—Ñ–∏–ª–µ:\n{user_data['profile_summary']}"
        
        if user_data.get('history_summary'):
            message += f"\n\nüí¨ –ò—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è:\n{user_data['history_summary']}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        markers = user_data.get('markers', {})
        if markers:
            message += "\n\nüè∑Ô∏è –ú–∞—Ä–∫–µ—Ä—ã:"
            for key, value in markers.items():
                message += f"\n‚Ä¢ {key}: {value}"
        
        dispatcher.utter_message(message)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è
        db_service.log_activity(
            user_id=user_id,
            activity_type="profile_viewed",
            details={"from": "chatbot"}
        )
        
        return []

class ActionAnalyzeProfile(Action):
    """–ê–Ω–∞–ª–∏–∑ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def name(self) -> Text:
        return "action_analyze_profile"
    
    async def run(self, dispatcher: CollectingDispatcher,
                 tracker: Tracker,
                 domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        
        user_id = tracker.sender_id
        try:
            user_id = int(user_id)
        except (ValueError, TypeError):
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            dispatcher.utter_message("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = db_service.get_user_by_id(user_id)
        if not user_data:
            dispatcher.utter_message("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        profile_service = ProfileService(db_service.session)
        analysis_result = await profile_service.analyze_profile(user_id)
        
        if not analysis_result:
            dispatcher.utter_message("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
            return []
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º
        message = f"üîç –ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è, {user_data.get('first_name', '')}:\n\n"
        
        if 'psychological_summary' in analysis_result:
            message += analysis_result['psychological_summary'] + "\n\n"
            
        if 'streams' in analysis_result:
            message += f"üìä –í–∞—à–∏ –ø–æ—Ç–æ–∫–∏: {', '.join(analysis_result['streams'])}\n\n"
            
        if 'gender' in analysis_result:
            gender_text = "–∂–µ–Ω—Å–∫–∏–π" if analysis_result['gender'] == GenderEnum.female else "–º—É–∂—Å–∫–æ–π"
            message += f"üë§ –ü–æ–ª: {gender_text}\n"
        
        dispatcher.utter_message(message)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
        db_service.log_activity(
            user_id=user_id,
            activity_type="profile_analyzed",
            details={"analysis_type": "full"}
        )
        
        return []

class ActionUpdateProfileMarker(Action):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def name(self) -> Text:
        return "action_update_profile_marker"
    
    async def run(self, dispatcher: CollectingDispatcher,
                 tracker: Tracker,
                 domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        
        user_id = tracker.sender_id
        try:
            user_id = int(user_id)
        except (ValueError, TypeError):
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            dispatcher.utter_message("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        marker_key = tracker.get_slot("marker_key")
        marker_value = tracker.get_slot("marker_value")
        
        if not marker_key:
            dispatcher.utter_message("–ù–µ —É–∫–∞–∑–∞–Ω –∫–ª—é—á –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            return []
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –≤ –ë–î
        success = db_service.update_user_marker(user_id, marker_key, marker_value)
        
        if success:
            dispatcher.utter_message(f"‚úÖ –ú–∞—Ä–∫–µ—Ä '{marker_key}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞
            db_service.log_activity(
                user_id=user_id,
                activity_type="marker_updated",
                details={"marker": marker_key, "value": marker_value}
            )
        else:
            dispatcher.utter_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        return [SlotSet("marker_key", None), SlotSet("marker_value", None)]
